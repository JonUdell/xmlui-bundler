name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build bundle tool
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p bundle
          if [ "${{ runner.os }}" = "Windows" ]; then
            go build -v -o bundle/xmlui-bundler.exe ./xmlui-bundler.go
          else
            go build -v -o bundle/xmlui-bundler ./xmlui-bundler.go
          fi

      - name: Make executable (and clear quarantine)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          chmod +x bundle/xmlui-bundler
          if [ "$(uname)" = "Darwin" ]; then
            xattr -d com.apple.quarantine bundle/xmlui-bundler || true
          fi

      - name: Run bundler to extract app footprint
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          cd bundle
          if [ "${{ runner.os }}" = "Windows" ]; then
            ./xmlui-bundler.exe
            # Handle cleanup manually for Windows
            rm -f *.zip || true
            rm -f xmlui-bundler.exe || true
          else
            ./xmlui-bundler
            ./cleanup.sh
          fi

      - name: Add README to bundle
        shell: bash
        run: cp XMLUI_GETTING_STARTED_README.md bundle/

      - name: Zip bundle
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            powershell -Command "Compress-Archive -Path bundle\* -DestinationPath xmlui-bundle-windows-amd64.zip"
          else
            (cd bundle && zip -r ../xmlui-bundle-${{ matrix.goos }}-${{ matrix.goarch }}.zip .)
          fi

      - name: Upload zipped bundle
        uses: actions/upload-artifact@v4
        with:
          name: xmlui-bundle-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          path: xmlui-bundle-${{ matrix.goos }}-${{ matrix.goarch }}.zip

  create-release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Checkout XMLUI repo
        uses: actions/checkout@v4
        with:
          repository: xmlui-com/xmlui
          token: ${{ secrets.PAT_TOKEN }}
          path: xmlui-source

      - name: Download bundle zips
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          find dist -name '*.zip' -exec cp {} release_assets/ \;

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: XMLUI Bundle ${{ github.event.inputs.tag }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
